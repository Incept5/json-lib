version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0

jobs:
  build-and-test:
    docker:
      - image: cimg/openjdk:21.0
    steps:
      - checkout
      - gradle/with_cache:
          steps:
            - run:
                name: Build and Test
                command: ./gradlew clean build
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports
          destination: reports

  publish-branch-snapshot:
    docker:
      - image: cimg/openjdk:21.0
    steps:
      - checkout
      - run:
          name: Set Version for Branch Build
          command: |
            # For branch builds, use SNAPSHOT version with branch name
            BRANCH_NAME=${CIRCLE_BRANCH//\//-}
            echo "export VERSION=1.0.0-${BRANCH_NAME}-SNAPSHOT" >> $BASH_ENV
            source $BASH_ENV
            echo "Using SNAPSHOT version for branch build: ${VERSION}"
      - gradle/with_cache:
          steps:
            - run:
                name: Build with SNAPSHOT Version
                command: ./gradlew clean build -Pversion=${VERSION}
            - run:
                name: Publish to Local Maven Repository Only
                command: ./gradlew publishToMavenLocal -Pversion=${VERSION}
      - run:
          name: Verify Local Maven Repository
          command: |
            echo "Verifying local artifacts:"
            find ~/.m2/repository -name "json-lib*" | grep "com/github/incept5" | sort
            echo "SNAPSHOT artifacts published to local Maven repository only (not to JitPack)"

  publish-main-release:
    docker:
      - image: cimg/openjdk:21.0
    steps:
      - checkout
      - run:
          name: Set Build Number for Release
          command: |
            # Use the CircleCI build number for versioning main branch builds
            echo "export BUILD_NUMBER=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            echo "export VERSION=1.0.${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            source $BASH_ENV
            echo "Using release version: ${VERSION}"
      - gradle/with_cache:
          steps:
            - run:
                name: Build with Release Version
                command: ./gradlew clean build -Pversion=${VERSION}
            - run:
                name: Publish to Local Maven Repository
                command: ./gradlew publishToMavenLocal -Pversion=${VERSION}
      - run:
          name: Create and Push Git Tag
          command: |
            echo "Creating tag for version: ${VERSION}"
            git config user.email "ci@incept5.com"
            git config user.name "CircleCI"
            git tag -a "${VERSION}" -m "Release version ${VERSION}"
            git push origin "${VERSION}"
      - run:
          name: Create GitHub Release
          command: |
            # Install GitHub CLI if not already installed
            if ! command -v gh &> /dev/null; then
              echo "Installing GitHub CLI..."
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
              sudo apt update -y
              sudo apt install gh -y
            fi
            
            # Authenticate with GitHub using GITHUB_TOKEN environment variable
            echo "Creating GitHub Release for version ${VERSION}..."
            if [ -n "$GITHUB_TOKEN" ]; then
              echo "$GITHUB_TOKEN" | gh auth login --with-token
              gh release create "${VERSION}" \
                --title "Release ${VERSION}" \
                --notes "Release version ${VERSION} built by CircleCI (Build #${BUILD_NUMBER})" \
                --repo "incept5/json-lib"
              echo "GitHub Release created successfully!"
            else
              echo "GITHUB_TOKEN not set. Skipping GitHub Release creation."
              echo "Please add GITHUB_TOKEN to CircleCI environment variables to enable automatic GitHub Release creation."
            fi
      
      - run:
          name: Trigger JitPack Build
          command: |
            # Verify local artifacts
            echo "Verifying local artifacts:"
            find ~/.m2/repository -name "json-lib*" | grep "com/github/incept5" | sort
            
            # Trigger JitPack build by making a request to the JitPack URL with the version tag
            echo "Triggering JitPack build for version ${VERSION}"
            curl -s "https://jitpack.io/com/github/incept5/json-lib/${VERSION}/json-lib-${VERSION}.pom" || true
            
            echo "JitPack build triggered for version ${VERSION}"
            echo "Artifacts will be available at: https://jitpack.io/#com.github.incept5/json-lib/${VERSION}"
            
            # Wait for JitPack to process the build (optional)
            echo "Waiting for JitPack to process the build..."
            sleep 60
            
            # Verify the build status
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/json-lib/${VERSION}/json-lib-${VERSION}.pom")
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "JitPack build successful!"
            else
              echo "JitPack build may still be in progress. Check status at: https://jitpack.io/com/github/incept5/json-lib/${VERSION}"
            fi

workflows:
  version: 2
  build-test-publish:
    jobs:
      - build-and-test
      # For main branch: increment version and publish to JitPack
      - publish-main-release:
          requires:
            - build-and-test
          filters:
            branches:
              only: main
      # For all other branches: use SNAPSHOT version and only publish locally
      - publish-branch-snapshot:
          requires:
            - build-and-test
          filters:
            branches:
              ignore: main